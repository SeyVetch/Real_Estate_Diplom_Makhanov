//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Server.EF
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Agent> Agent { get; set; }
        public virtual DbSet<Client> Client { get; set; }
        public virtual DbSet<Developer> Developer { get; set; }
        public virtual DbSet<Gender> Gender { get; set; }
        public virtual DbSet<LivingProperty> LivingProperty { get; set; }
        public virtual DbSet<LivingPropertyType> LivingPropertyType { get; set; }
        public virtual DbSet<NonLivingProperty> NonLivingProperty { get; set; }
        public virtual DbSet<NonLivingPropertyType> NonLivingPropertyType { get; set; }
        public virtual DbSet<PaymentPeriod> PaymentPeriod { get; set; }
        public virtual DbSet<Property> Property { get; set; }
        public virtual DbSet<PropertyImage> PropertyImage { get; set; }
        public virtual DbSet<PropertyLocation> PropertyLocation { get; set; }
        public virtual DbSet<PropertyLocationImage> PropertyLocationImage { get; set; }
        public virtual DbSet<PropertyTransaction> PropertyTransaction { get; set; }
        public virtual DbSet<PurchasableProperty> PurchasableProperty { get; set; }
        public virtual DbSet<Realtor> Realtor { get; set; }
        public virtual DbSet<RentalProperty> RentalProperty { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Tag> Tag { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<AgentSaleView> AgentSaleView { get; set; }
        public virtual DbSet<PropertyView> PropertyView { get; set; }
    
        [DbFunction("Entities", "SearchProperty")]
        public virtual IQueryable<SearchProperty_Result> SearchProperty(string typeProperty, Nullable<int> yearMin, Nullable<int> yearMax, Nullable<int> roomNumber, Nullable<bool> hasParking, Nullable<bool> hasHeating, Nullable<bool> hasElevator, Nullable<int> minBathroomQuantity, Nullable<decimal> priceTotal, Nullable<decimal> rent)
        {
            var typePropertyParameter = typeProperty != null ?
                new ObjectParameter("TypeProperty", typeProperty) :
                new ObjectParameter("TypeProperty", typeof(string));
    
            var yearMinParameter = yearMin.HasValue ?
                new ObjectParameter("YearMin", yearMin) :
                new ObjectParameter("YearMin", typeof(int));
    
            var yearMaxParameter = yearMax.HasValue ?
                new ObjectParameter("YearMax", yearMax) :
                new ObjectParameter("YearMax", typeof(int));
    
            var roomNumberParameter = roomNumber.HasValue ?
                new ObjectParameter("RoomNumber", roomNumber) :
                new ObjectParameter("RoomNumber", typeof(int));
    
            var hasParkingParameter = hasParking.HasValue ?
                new ObjectParameter("HasParking", hasParking) :
                new ObjectParameter("HasParking", typeof(bool));
    
            var hasHeatingParameter = hasHeating.HasValue ?
                new ObjectParameter("HasHeating", hasHeating) :
                new ObjectParameter("HasHeating", typeof(bool));
    
            var hasElevatorParameter = hasElevator.HasValue ?
                new ObjectParameter("HasElevator", hasElevator) :
                new ObjectParameter("HasElevator", typeof(bool));
    
            var minBathroomQuantityParameter = minBathroomQuantity.HasValue ?
                new ObjectParameter("MinBathroomQuantity", minBathroomQuantity) :
                new ObjectParameter("MinBathroomQuantity", typeof(int));
    
            var priceTotalParameter = priceTotal.HasValue ?
                new ObjectParameter("PriceTotal", priceTotal) :
                new ObjectParameter("PriceTotal", typeof(decimal));
    
            var rentParameter = rent.HasValue ?
                new ObjectParameter("Rent", rent) :
                new ObjectParameter("Rent", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SearchProperty_Result>("[Entities].[SearchProperty](@TypeProperty, @YearMin, @YearMax, @RoomNumber, @HasParking, @HasHeating, @HasElevator, @MinBathroomQuantity, @PriceTotal, @Rent)", typePropertyParameter, yearMinParameter, yearMaxParameter, roomNumberParameter, hasParkingParameter, hasHeatingParameter, hasElevatorParameter, minBathroomQuantityParameter, priceTotalParameter, rentParameter);
        }
    
        [DbFunction("Entities", "TagsOfProperty")]
        public virtual IQueryable<TagsOfProperty_Result> TagsOfProperty(Nullable<int> idProperty)
        {
            var idPropertyParameter = idProperty.HasValue ?
                new ObjectParameter("IdProperty", idProperty) :
                new ObjectParameter("IdProperty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<TagsOfProperty_Result>("[Entities].[TagsOfProperty](@IdProperty)", idPropertyParameter);
        }
    
        public virtual int CheckPrice(Nullable<int> idProp)
        {
            var idPropParameter = idProp.HasValue ?
                new ObjectParameter("IdProp", idProp) :
                new ObjectParameter("IdProp", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CheckPrice", idPropParameter);
        }
    
        public virtual int CountSalesAgentThisMonth(Nullable<int> idAgent)
        {
            var idAgentParameter = idAgent.HasValue ?
                new ObjectParameter("IdAgent", idAgent) :
                new ObjectParameter("IdAgent", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CountSalesAgentThisMonth", idAgentParameter);
        }
    
        public virtual int GetAge(Nullable<System.DateTime> birthDate, ObjectParameter age)
        {
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAge", birthDateParameter, age);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
